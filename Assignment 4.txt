1. import java.util.*;
  
class RD 
{
    static String removeDuplicate(char str[], int n)
    {
        
        int index = 0;
  

        for (int i = 0; i < n; i++)
        {
  

            int j;
            for (j = 0; j < i; j++) 
            {
                if (str[i] == str[j])
                {
                    break;
                }
            }
  
           
            if (j == i) 
            {
                str[index++] = str[i];
            }
        }
        return String.valueOf(Arrays.copyOf(str, index));
    }
  
    
    public static void main(String[] args)
    {
        char str[] = "ineuron".toCharArray();
        int n = str.length;
        System.out.println(removeDuplicate(str, n));
    }
}
  



2.
public class DuplicateCharacters {    
     public static void main(String[] args) {    
        String string1 = "Java is a structured programming language";    
        int count;    

   
        char string[] = string1.toCharArray();    
            
        System.out.println("Duplicate characters in a given string: ");    
            
        for(int i = 0; i <string.length; i++) {    
            count = 1;    
            for(int j = i+1; j <string.length; j++) {    
                if(string[i] == string[j] && string[i] != ' ') {    
                    count++;    
                      
                    string[j] = '0';    
                }    
            }    
               
            if(count > 1 && string[i] != '0')    
                System.out.println(string[i]);    
        }    
    }    
}     



3. class Palindrome{  
 public static void main(String args[]){  
  int r,sum=0,temp;    
  int n=2552; 
  
  temp=n;    
  while(n>0){    
   r=n%10;   
   sum=(sum*10)+r;    
   n=n/10;    
  }    
  if(temp==sum)    
   System.out.println("palindrome number ");    
  else    
   System.out.println("not palindrome");    
}  
}  



4.
import java.io.*;
  
public class CCT {
  
   
    static void countCharacterType(String str)
    {
        
        int vowels = 0, consonant = 0, specialChar = 0, 
            digit = 0;
      
       
        for (int i = 0; i < str.length(); i++) {
              
            char ch = str.charAt(i);
      
            if ( (ch >= 'a' && ch <= 'z') || 
                (ch >= 'A' && ch <= 'Z') ) {
      
               
                ch = Character.toLowerCase(ch);
      
                if (ch == 'a' || ch == 'e' || ch == 'i' ||
                    ch == 'o' || ch == 'u')
                    vowels++;
                else
                    consonant++;
            }
           
            else
                specialChar++;
        }
          
        System.out.println("Vowels: " + vowels);
        System.out.println("Consonant: " + consonant);
        System.out.println("Special Character: " + specialChar);
    }
      
    // Driver function.
    static public void main (String[] args)
    {
        String str = "Java is a structured programming language";
          
        countCharacterType(str);
    }
}




5. 
import java.util.Arrays;    
public class AnagramStringExample1  
{    
      
static void isAnagram(String str1, String str2)   
{    
 
String s1 = str1.replaceAll("\\s", "");    
 
String s2 = str2.replaceAll("\\s", "");    
boolean status = true;    
 
if (s1.length() != s2.length())   
{    
     
status = false;    
}   
 
else   
{    
  
char[] arrayS1 = s1.toLowerCase().toCharArray();    
 
char[] arrayS2 = s2.toLowerCase().toCharArray();    
  
Arrays.sort(arrayS1);    
  
Arrays.sort(arrayS2);    
  
status = Arrays.equals(arrayS1, arrayS2);    
}    
if (status)   
{    
     
System.out.println(s1 + " and " + s2 + " are anagrams");    
}   
else   
{    
    
System.out.println(s1 + " and " + s2 + " are not anagrams");    
}    
}    
 
public static void main(String args[])   
{    
      
isAnagram("HEART", "EARTH");    
isAnagram("TRIANGLE", "INTEGRAL");    
isAnagram("TOSS", "SHOT");   
}    
}    






6.
public class PangramString  
{  
static int size = 26;  

static boolean isLetter(char ch)  
{  
if (!Character.isLetter(ch))  
  
return false;  
  
return true;  
}  
  
static boolean containsAllLetters(String str, int len)  
{  
 
str = str.toLowerCase();  
  
boolean[] present = new boolean[size];  
  
for (int i = 0; i < len; i++)   
{  
 
if (isLetter(str.charAt(i)))   
{  
int letter = str.charAt(i) - 'a';  
 
present[letter] = true;  
}  
}  
  
for (int i = 0; i < size; i++)   
{  
if (!present[i])  
  
return false;  
}  
 
return true;  
}  

public static void main(String args[])  
{  
 
String str = "Abcdefghijklmnopqrstuvwxyz";  
  
int len = str.length();  
 
if (containsAllLetters(str, len))  
System.out.println("The given string is a pangram string.");  
else  
System.out.println("The given string is not a pangram string.");  
}  
}  





7.
import java.util.Scanner;
public class IndexOfExample {
   public static void main(String args[]) {
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter the required String: ");
      String str = sc.next();
      System.out.println("Enter the required character: ");
      char ch = sc.next().toCharArray()[0];
      
      int i = str.indexOf(ch);
      if(i!=-1) {
         System.out.println("Sting contains the specified character");
      } else {
         System.out.println("String doesnâ€™t contain the specified character");
      }
   }
}




8.
public class OC {
    static final int ASCII_SIZE = 256;
    static char getMaxOccurringChar(String str)
    {
       
        int count[] = new int[ASCII_SIZE];
 
        
        int len = str.length();
        for (int i = 0; i < len; i++)
            count[str.charAt(i)]++;
 
        int max = -1; 
        char result = ' '; 
 
        
        for (int i = 0; i < len; i++) {
            if (max < count[str.charAt(i)]) {
                max = count[str.charAt(i)];
                result = str.charAt(i);
            }
        }
 
        return result;
    }
 
   
    public static void main(String[] args)
    {
        String str = "sample string";
        System.out.println("Max occurring character is "
                           + getMaxOccurringChar(str));
    }
}